{"name":"Jquery.clientsidelogging","body":"# jQuery.clientSideLogging, the jQuery client side logging plugin\r\n\r\n## About\r\n\r\nWe've all been there; someone's encountering an error on your site, but everything's fine for you. What browser are they using? What's the error message? How many people is this affecting? Usually, you're in the dark: but no more!\r\n\r\nWith clientSideLogging, you can quietly log the errors that your users encounter (and also some debugging info of your own, if you like) and collate it server-side. Then, when you hear of a problem, you can check the logs — and see whether it's affecting one person or one thousand, one browser or many. You can even log useful information like screen resolution and browser size, for those inevitable small- or big-screen edge-cases.\r\n\r\nThe inspiration for this jQuery plugin came from [Karl Seguin's excellent article](http://openmymind.net/2012/4/4/You-Really-Should-Log-Client-Side-Error/).\r\n\r\n## Usage\r\n\r\n### Frontend\r\n\r\nFirst things first, you need to set up your JavaScript code to log errors. Setup is easy; just include the jQuery plugin after jQuery, and call:\r\n\r\n\t$.clientSideLogging();\r\n\r\nThere are some default arguments that you can override. At the very least, you should set the `error_url`, `info_url`, and `log_url` settings to point to your backend:\r\n\r\n\t$.clientSideLogging({\r\n\t\terror_url: '/log?type=error',\t// The url to which errors logs are sent\r\n\t\tinfo_url: '/log?type=info',\t\t// The url to which info logs are sent\r\n\t\tlog_url: '/log?type=log',\t\t// The url to which standard logs are sent\r\n\t\tlog_level: 1,\t\t\t\t\t// The level at which to log. This allows you to keep the calls to the logging in your code and just change this variable to log varying degrees. 1 = only error, 2 = error & log, 3 = error, log & info\r\n\t\tnative_error:true,\t\t\t\t// Whether or not to send native js errors as well (using window.onerror).\r\n\t\thijack_console:true,\t\t\t// Hijacks the default console functionality (ie: all your console.error/info/log are belong to us).\r\n\t\tquery_var: 'msg',\t\t\t\t// The variable to send the log message through as.\r\n\t\tclient_info: {\t\t\t\t\t// Configuration for what info about the client's browser is logged.\r\n\t\t\tlocation:true,\t\t\t\t//\tThe url to the page on which the error occurred.\r\n\t\t\tscreen_size:true,\t\t\t//\tThe size of the user's screen (different to the window size because the window might not be maximized)\r\n\t\t\tuser_agent:true,\t\t\t//\tThe user agent string.\r\n\t\t\twindow_size:true\t\t\t//\tThe window size.\r\n\t\t}\r\n\t});\r\n\r\nNow, to actually use it! You can log values yourself, using three utility/wrapper functions; all of them accept either a plain string or a JavaScript object:\r\n\r\n* `$.error(what)` - Send an error message to the server; also calls console.error (if available)\r\n* `$.info(what)` - Send an info message to the server; also calls console.info (if available)\r\n* `$.log(what)` - Send a log message to the server; also calls console.log (if available)\r\n\r\nThe log will be sent to the backend as a normal `POST` request, which might look like the following:\r\n\r\n\t$.post('/log?type=error&msg=YOUR_ERROR_MESSAGE');\r\n\r\n#### Notes\r\n\r\n* `native_error` is set to `true` by default. This means that all browser errors will also be captured and passed to the backend.\r\n* `hijack_console` is set to `true` by default and will log to the server as well as display your normal console.error/info/log. If you wish to keep the functionality for $.error and console.error (for example) separate, set hijack_console to false.\r\n\r\n### Backend\r\n\r\nSending errors is all well and good, but not if you've not got anything to receive them! So, you need to have something on your server that will store error messages sent to it.\r\n\r\nIncluded in the distribution is a sample backend that should suffice for most people; it stores logs in a JSON-serialised text file, so it should be portable and relatively fast.\r\n\r\nThis default backend will write its logs to a file called `log.txt` in its current directory; simply edit the `LOG_FILE` constant to change this — something that's highly recommended, to keep things private.\r\n\r\n### Viewing the logs\r\n\r\nAlso included with the distribution is a PHP frontend for parsing and displaying log entries; called `view_logs.php`, this script looks for the log file generated by the `log.php` script (make sure the `LOG_FILE` constant in the two of them matches) and displays a few nicely formatted tables of log information, and allows you to filter by severity.\r\n\r\n## Credit\r\n\r\njQuery.clientSideLogging was developed by [Remy Bach](https://github.com/remybach) (JavaScript) and [Rob Miller](https://github.com/robmiller) (PHP).\r\n","tagline":"This plugin allows you to store front end log/info/error messages on the server (note: you will need to have something set up on your server to handle the actual logging).","google":"UA-26812491-2","note":"Don't delete this file! It's used internally to help with page regeneration."}